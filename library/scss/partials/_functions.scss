/******************************************************************
Site Name:
Author:

Stylesheet: Sass Functions

You can do a lot of really cool things in Sass. Functions help you
make repeated actions a lot easier. They are really similar to mixins,
but can be used for so much more.

Anyway, keep them all in here so it's easier to find when you're
looking for one.

For more info on functions, go here:
http://sass-lang.com/documentation/Sass/Script/Functions.html

******************************************************************/


/*********************
COLOR FUNCTIONS
These are helpful when you're working
with shadows and such things. It's essentially
a quicker way to write RGBA.

Example:
box-shadow: 0 0 4px black(0.3);
compiles to:
box-shadow: 0 0 4px rgba(0,0,0,0.3);
*********************/

// black
@function black($opacity) {
    @return rgba(0,0,0,$opacity);
}

// white
@function white($opacity) {
    @return rgba(255,255,255,$opacity);
}


/*********************
RESPONSIVE HELPER FUNCTION
If you're creating a responsive site, then
you've probably already read
Responsive Web Design: http://www.abookapart.com/products/responsive-web-design

Here's a nice little helper function for calculating
target / context
as mentioned in that book.

Example:
width: cp(650px, 1000px);
or
width: calc-percent(650px, 1000px);
both compile to:
width: 65%;
*********************/

@function calc-percent($target, $container) {
  @return ($target / $container) * 100%;
}
@function cp($target, $container) {
  @return calc-percent($target, $container);
}


/***
To Unicode
***/
@function to-hexchar($number) {
  @if($number <= 9) {
    @return inspect($number);
  }
  @if($number == 10){
    @return "a";
  }
  @if($number == 11){
    @return "b";
  }
  @if($number == 12){
    @return "c";
  }
  @if($number == 13){
    @return "d";
  }
  @if($number == 14){
    @return "e";
  }
  @if($number == 15){
    @return "f";
  }
}
@function to-unicode($number) {
  $d3: floor(floor(floor($number / 16) / 16) / 16) % 16; 
  $d2: floor(floor($number / 16) / 16) % 16; 
  $d1: floor($number / 16) % 16;
  $d0: $number % 16;
  @return unquote("\"")+unquote("\\")+to-hexchar($d3)+to-hexchar($d2)+to-hexchar($d1)+to-hexchar($d0)+unquote("\"");
}

/***
HSB
***/
@function hsb($h-hsb, $s-hsb, $b-hsb) {
  @return hsba($h-hsb, $s-hsb, $b-hsb);
}

@function hsba($h-hsb, $s-hsb, $b-hsb, $a: 1) {
  @if $b-hsb == 0 {
    @return hsla(0, 0, 0, $a);
  } @else {
    $l-hsl: ($b-hsb/2) * (2 - ($s-hsb/100));
    @if $l-hsl == 100 {
      @return hsla(0, 100, 100, $a);
    } @else {
      $s-hsl: ($b-hsb * $s-hsb) / if($l-hsl < 50, $l-hsl * 2, 200 - $l-hsl * 2);
      @return hsla($h-hsb, $s-hsl, $l-hsl, $a);
    }
  }
}

@function rgb-to-hsb($baseColor) {
    $r-rgb: red($baseColor);
    $g-rgb: green($baseColor);
    $b-rgb: blue($baseColor);
    $max: max($r-rgb, $g-rgb, $b-rgb);
    $min: min($r-rgb, $g-rgb, $b-rgb);

    $h-hsb: 0;
    @if $max == $min {
        $h-hsb: 0;
    }@else if $max == $r-rgb {
        $h-hsb: 60 * (($g-rgb - $b-rgb) / ($max - $min));
    } @else if $max == $g-rgb {
        $h-hsb: 60 * (($b-rgb - $r-rgb) / ($max - $min)) + 120;
    } @else if $max == $b-rgb {
        $h-hsb: 60 * (($r-rgb - $g-rgb) / ($max - $min)) + 240;
    }

    $h-hsb: if($h-hsb < 0, $h-hsb + 360, $h-hsb);
    $s-hsb: (($max - $min) / $max) * 100;
    $b-hsb: ($max / 255) * 100;

    @return $h-hsb, $s-hsb, $b-hsb;
}



@function hsb-to-rgb($h-hsb, $s-hsb, $b-hsb) {
    $max: $b-hsb * 255 / 100;
    $min: $max - (($s-hsb / 100) * $max);
    $r-rgb: 0;
    $g-rgb: 0;
    $b-rgb: 0;

    @if 0 <= $h-hsb and $h-hsb <= 60 {
        $r-rgb: $max;
        $g-rgb: ($h-hsb / 60) * ($max - $min) + $min;
        $b-rgb: $min;
    } @else if 61 <= $h-hsb and $h-hsb <= 120 {
        $r-rgb: ((120 - $h-hsb) / 60) * ($max - $min) + $min;
        $g-rgb: $max;
        $b-rgb: $min;
    } @else if 121 <= $h-hsb and $h-hsb <= 180 {
        $r-rgb: $min;
        $g-rgb: $max;
        $b-rgb: (($h-hsb - 120) / 60) * ($max - $min) + $min;
    } @else if 181 <= $h-hsb and $h-hsb <= 240 {
        $r-rgb: $min;
        $g-rgb: ((240 - $h-hsb) / 60) * ($max - $min) + $min;
        $b-rgb: $max;
    } @else if 241 <= $h-hsb and $h-hsb <= 300 {
        $r-rgb: (($h-hsb - 240) / 60) * ($max - $min) + $min;
        $g-rgb: $min;
        $b-rgb: $max;
    } @else if 301 <= $h-hsb and $h-hsb <= 360 {
        $r-rgb: $max;
        $g-rgb: $min;
        $b-rgb: ((360 - $h-hsb) / 60) * ($max - $min) + $min;
    }

    @return rgb($r-rgb, $g-rgb, $b-rgb);
}
 
@function adjust-saturation($baseColor, $num) {
    $hsb: rgb-to-hsb($baseColor);
    $s:   nth($hsb, 2) + $num;
    @if ($s > 100) {
      $s: 100;
    } @else if ($s < 0) {
      $s: 0;
    }
    @return hsb-to-rgb(nth($hsb, 1), $s, nth($hsb, 3));
}

@function adjust-bright($baseColor, $num) {
    $hsb: rgb-to-hsb($baseColor);
    $b:   nth($hsb, 3) + $num;
    @if ($b > 100) {
      $b: 100;
    } @else if ($b < 0) {
      $b: 0;
    }
    @return hsb-to-rgb(nth($hsb, 1), nth($hsb, 2), $b);
}

@function change-hue($baseColor, $num) {
    @return change-color($baseColor, $hue: $num);
}
 
@function change-saturation($baseColor, $num) {
    $hsb: rgb-to-hsb($baseColor);
    $s:   $num;
    @if ($s > 100) {
      $s: 100;
    } @else if ($s < 0) {
      $s: 0;
    }
    @return hsb-to-rgb(nth($hsb, 1), $s, nth($hsb, 3));
}

@function change-bright($baseColor, $num) {
    $hsb: rgb-to-hsb($baseColor);
    $b:   $num;
    @if ($b > 100) {
      $b: 100;
    } @else if ($b < 0) {
      $b: 0;
    }
    @return hsb-to-rgb(nth($hsb, 1), nth($hsb, 2), $b);
}

@function brighten($baseColor, $percentage: 10%) {
    @return adjust-bright($baseColor, $percentage / 1%);
}

@function dullen($baseColor, $percentage: 10%) {
    @return brighten($baseColor, -$percentage);
}